Index of libs-snapshot-local/com/precisely/b2b/identity/identity-svc/1.0-feature_identity_liberty-SNAPSHOT

implementation 'ch.appuio.techlab:artifactorytest:0.1.1-SNAPSHOT'


implementation 'ch.appuio.techlab:artifactorytest:0.1.1-SNAPSHOT'
plugins {
    id 'java'
}

repositories {
    maven {
        url "http://172.27.225.231:8082/artifactory/libs-release-local" // Replace with your Artifactory repository URL
        credentials {
            username = "${artifactory_user}"
            password = "${artifactory_password}"
        }
    }
}

dependencies {
    implementation 'com.example:my-jar-artifact:1.0.0' // Coordinates of the JAR file
}

// Task to ensure dependencies are resolved
task ensureDependenciesResolved {
    doLast {
        configurations.implementation.resolve()
    }
}

// Task to print the path of the downloaded JAR file
task printDependencyPath {
    dependsOn ensureDependenciesResolved
    doLast {
        configurations.implementation.resolvedConfiguration.resolvedArtifacts.each { artifact ->
            if (artifact.file.name.endsWith('.jar')) {
                println "Dependency JAR file path: ${artifact.file.absolutePath}"
            }
        }
    }
}

// Task to copy the JAR file to a specific directory
task copyDependencies(type: Copy) {
    dependsOn ensureDependenciesResolved
    from {
        configurations.implementation.resolvedConfiguration.resolvedArtifacts.collect { it.file }
    }
    into "$buildDir/libs"
}

// Ensure the build depends on both tasks
tasks.build {
    dependsOn copyDependencies
    dependsOn printDependencyPath
}


----------
plugins {
    id 'java'
}

repositories {
    maven {
        url "http://172.27.225.231:8082/artifactory/libs-release-local" // Replace with your Artifactory repository URL
        credentials {
            username = "${artifactory_user}"
            password = "${artifactory_password}"
        }
    }
}

// Define a custom task to download the WAR file
task downloadWar(type: Download) {
    src 'http://172.27.225.231:8082/artifactory/libs-release-local/com/example/my-war-artifact/1.0.0/my-war-artifact-1.0.0.war'
    dest "$buildDir/libs/my-war-artifact-1.0.0.war"
}

// Add the downloaded WAR file as a dependency
dependencies {
    compileOnly files("$buildDir/libs/my-war-artifact-1.0.0.war")
}

// Use the custom task in the build lifecycle
tasks.build {
    dependsOn downloadWar
}

// Ensure that the WAR file is available for the `build` task
tasks.withType(JavaCompile) {
    dependsOn downloadWar
}

================================












def getArtifactRepo() {
    if (params.ARTIFACTORY_REPOSITORY) {
        return params.ARTIFACTORY_REPOSITORY
    } else {
        return artifactRepoList[0]
    }
}

def nodeLabel = 'b2bi-build-03'
def artifactRepoList = ['libs-snapshot-local', 'libs-release-local']

pipeline {
    agent { label nodeLabel }
    parameters {
         choice(name: 'ARTIFACTORY_REPOSITORY', choices: artifactRepoList)
    }
  environment {
    ARTIFACTORY_CREDS = credentials('artifactory-publisher') 
    ARTIFACTORY_REPOSITORY = getArtifactRepo()
    ARTIFACTORY_SERVER_ID= 'ARTIFACTORY'
  }
 

    stages {

        stage('Build and Clean') {
            steps {
                script {
                
                  def branchId = env.GIT_BRANCH
                  def server = Artifactory.server(ARTIFACTORY_SERVER_ID)
                  def artifactoryUrl = server.getUrl()
                  
                  env.ARTIFACTORY_URL = artifactoryUrl 
                  env.ARTIFACTORY_USER = ARTIFACTORY_CREDS_USR
                  env.ARTIFACTORY_PASSWORD = ARTIFACTORY_CREDS_PSW
                    
                  sh 'chmod +x gradlew'
                       sh """
                       echo 'testing -----------'
                        ./gradlew clean build artifactoryPublish \\
                        -PartifactoryURL=${env.ARTIFACTORY_URL} \\
                        -PartifactoryRepo=${env.ARTIFACTORY_REPOSITORY}  \\
                        -PartifactoryUser=${env.ARTIFACTORY_USER} \\
                        -PartifactoryPassword=${env.ARTIFACTORY_PASSWORD} \\
                        -PbranchId=${branchId}
                      """
              
                }
            }
        }
    }
      
    post {
        always {
            emailext(
                to: mailingList,
                recipientProviders: [culprits(), requestor(), upstreamDevelopers()],
                replyTo: mailingList,
                subject: "[${repoName}] Build #${currentBuild.number} ${currentBuild.currentResult}",
                mimeType: 'text/html',
                body: '${JELLY_SCRIPT,template="html.jelly"}'
            )
        }
	 failure {
            emailext(
                to: '$DEFAULT_RECIPIENTS',
                recipientProviders: [culprits(), requestor()],
                replyTo: mailingList,
                subject: "[${repoName}] Build #${currentBuild.number} ${currentBuild.currentResult}",
                mimeType: 'text/html',
                body: '${JELLY_SCRIPT,template="html.jelly"}'
            )
        }
    }
}
