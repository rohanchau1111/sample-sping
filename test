







pipeline {
    agent any

    tools {
        jdk 'JDK 11'  // Specify your JDK version
    }

    environment {
        GRADLE_OPTS = '-Dorg.gradle.daemon=false'
    }

    stages {
        stage('Checkout') {
            steps {
                checkout scm
            }
        }

        stage('Build and Test') {
            steps {
                script {
                    // This builds all subprojects in the multi-module setup
                    sh './gradlew clean build'
                }
            }
        }

        stage('JaCoCo Report') {
            steps {
                script {
                    // Generate the JaCoCo test coverage report
                    sh './gradlew jacocoTestReport'
                }
            }
        }

        stage('Publish JaCoCo Report') {
            steps {
                jacoco execPattern: '**/build/jacoco/*.exec', // Coverage data
                       classPattern: '**/build/classes/java/main', // Path to compiled classes
                       sourcePattern: '**/src/main/java', // Path to source code
                       inclusionPattern: '**/*.class',
                       exclusionPattern: '**/test/**'
            }
        }
    }

    post {
        always {
            junit '**/build/test-results/**/*.xml'  // Publish JUnit test results
            jacoco execPattern: '**/build/jacoco/*.exec'  // Publish JaCoCo coverage results
        }
    }
}














b2bi-identity
buildSrc
gradle/wrapper
identity-liberty
identity-svc
identity-test-resource-server
identity-ui
pem-identity
.gitignore	
build.gradle	 
gradle.properties
PEM-26605 basic Spring OAuth Auth Server 
PEM-26605 basic Spring OAuth Auth Server
Jenkinsfile 	
settings.gradle











plugins {
    id 'identity-config-java-library'
    id 'identity-config-lombok'
    id 'identity-config-springboot'
    id 'java'
    id 'war'
    id 'maven-publish'
    id 'com.jfrog.artifactory' version '5.1.12'
    id 'jacoco'
}

dependencies {
    implementation project(':b2bi-identity')
    implementation project(':pem-identity')
    runtimeOnly project(':identity-ui')
    
    // Ref - https://docs.spring.io/spring-boot/docs/3.0.4/gradle-plugin/reference/htmlsingle/#packaging-executable
    // Add embedded tomcat as providedRuntime. This ensures it is packaged in the 
    // war file’s WEB-INF/lib-provided directory from where they will not conflict 
    // with the external container’s own classes.
    providedRuntime('org.springframework.boot:spring-boot-starter-tomcat')
    
    implementation 'org.springframework.boot:spring-boot-starter-oauth2-authorization-server'
    implementation 'org.springframework.boot:spring-boot-starter-security'
    implementation 'org.springframework.boot:spring-boot-starter-web'
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
    implementation 'org.springframework.boot:spring-boot-starter-thymeleaf'
    
    implementation 'com.ibm.db2.jcc:db2jcc:db2jcc4'
    implementation 'com.microsoft.sqlserver:mssql-jdbc:9.4.0.jre11'
    implementation 'com.oracle.database.jdbc:ojdbc8:12.2.0.1'

    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    testImplementation('junit:junit:4.13.2')
}

springBoot {
    mainClass = 'com.precisely.b2b.identity.server.IdentityServiceApplication'
}

test {
     finalizedBy jacocoTestReport
     useJUnitPlatform()
}

jacocoTestReport {
  dependsOn test
    reports {
        xml.required.set(true)
        csv.required.set(true)
        html.required.set(true)
    }
}

jacocoTestCoverageVerification {
   violationRules {
       rule {
          limit {
             minimum = 0.1
            }
        }
    }
}


task copyWebApp(type: Copy) {
    dependsOn ':identity-ui:build'  
    from file("${rootDir}/identity-ui/packages/login/build/dist/")
    into file("${buildDir}/resources/main/static/")
}

def tasksToConfigure = ['bootWar', 'war', 'jar', 'resolveMainClassName', 'pmdMain']
tasksToConfigure.each { taskName ->
    tasks.named(taskName) {
        dependsOn tasks.named('copyWebApp')
    }
}

publishing {
    publications {
        bootJava(MavenPublication) {
            def BranchId = branchId.replaceAll('/', '_') 
            version = "${version}-${BranchId}-SNAPSHOT" 
            from components.web
            artifact tasks.named("bootWar")
            
             artifact("${projectDir}/application_sample.yml") {
             classifier = 'application_sample'
             extension = 'yml'
         }
          
         artifact("${project.rootDir}/identity-liberty/build/distributions/identity.zip") {
              classifier = 'identity'
               extension = 'zip'
             }
           }
        }
}

artifactory {
    publish {
        contextUrl = "$artifactoryURL"
        repository {
            repoKey = "$artifactoryRepo"
            username = "$artifactoryUser"
            password = "$artifactoryPassword"
        }
        defaults {
            publications('mavenJava','bootJava') 
            publishArtifacts = true
            publishPom = true
        }
    }
}
 
tasks.build {
    dependsOn test 
}
tasks.named('test') {
        useJUnitPlatform()
}

Index of libs-snapshot-local/com/precisely/b2b/identity/identity-svc/1.0-feature_identity_liberty-SNAPSHOT

implementation 'ch.appuio.techlab:artifactorytest:0.1.1-SNAPSHOT'


implementation 'ch.appuio.techlab:artifactorytest:0.1.1-SNAPSHOT'
plugins {
    id 'java'
}

repositories {
    maven {
        url "http://172.27.225.231:8082/artifactory/libs-release-local" // Replace with your Artifactory repository URL
        credentials {
            username = "${artifactory_user}"
            password = "${artifactory_password}"
        }
    }
}

dependencies {
    implementation 'com.example:my-jar-artifact:1.0.0' // Coordinates of the JAR file
}

// Task to ensure dependencies are resolved
task ensureDependenciesResolved {
    doLast {
        configurations.implementation.resolve()
    }
}

// Task to print the path of the downloaded JAR file
task printDependencyPath {
    dependsOn ensureDependenciesResolved
    doLast {
        configurations.implementation.resolvedConfiguration.resolvedArtifacts.each { artifact ->
            if (artifact.file.name.endsWith('.jar')) {
                println "Dependency JAR file path: ${artifact.file.absolutePath}"
            }
        }
    }
}

// Task to copy the JAR file to a specific directory
task copyDependencies(type: Copy) {
    dependsOn ensureDependenciesResolved
    from {
        configurations.implementation.resolvedConfiguration.resolvedArtifacts.collect { it.file }
    }
    into "$buildDir/libs"
}

// Ensure the build depends on both tasks
tasks.build {
    dependsOn copyDependencies
    dependsOn printDependencyPath
}


----------
plugins {
    id 'java'
}

repositories {
    maven {
        url "http://172.27.225.231:8082/artifactory/libs-release-local" // Replace with your Artifactory repository URL
        credentials {
            username = "${artifactory_user}"
            password = "${artifactory_password}"
        }
    }
}

// Define a custom task to download the WAR file
task downloadWar(type: Download) {
    src 'http://172.27.225.231:8082/artifactory/libs-release-local/com/example/my-war-artifact/1.0.0/my-war-artifact-1.0.0.war'
    dest "$buildDir/libs/my-war-artifact-1.0.0.war"
}

// Add the downloaded WAR file as a dependency
dependencies {
    compileOnly files("$buildDir/libs/my-war-artifact-1.0.0.war")
}

// Use the custom task in the build lifecycle
tasks.build {
    dependsOn downloadWar
}

// Ensure that the WAR file is available for the `build` task
tasks.withType(JavaCompile) {
    dependsOn downloadWar
}

================================












def getArtifactRepo() {
    if (params.ARTIFACTORY_REPOSITORY) {
        return params.ARTIFACTORY_REPOSITORY
    } else {
        return artifactRepoList[0]
    }
}

def nodeLabel = 'b2bi-build-03'
def artifactRepoList = ['libs-snapshot-local', 'libs-release-local']

pipeline {
    agent { label nodeLabel }
    parameters {
         choice(name: 'ARTIFACTORY_REPOSITORY', choices: artifactRepoList)
    }
  environment {
    ARTIFACTORY_CREDS = credentials('artifactory-publisher') 
    ARTIFACTORY_REPOSITORY = getArtifactRepo()
    ARTIFACTORY_SERVER_ID= 'ARTIFACTORY'
  }
 

    stages {

        stage('Build and Clean') {
            steps {
                script {
                
                  def branchId = env.GIT_BRANCH
                  def server = Artifactory.server(ARTIFACTORY_SERVER_ID)
                  def artifactoryUrl = server.getUrl()
                  
                  env.ARTIFACTORY_URL = artifactoryUrl 
                  env.ARTIFACTORY_USER = ARTIFACTORY_CREDS_USR
                  env.ARTIFACTORY_PASSWORD = ARTIFACTORY_CREDS_PSW
                    
                  sh 'chmod +x gradlew'
                       sh """
                       echo 'testing -----------'
                        ./gradlew clean build artifactoryPublish \\
                        -PartifactoryURL=${env.ARTIFACTORY_URL} \\
                        -PartifactoryRepo=${env.ARTIFACTORY_REPOSITORY}  \\
                        -PartifactoryUser=${env.ARTIFACTORY_USER} \\
                        -PartifactoryPassword=${env.ARTIFACTORY_PASSWORD} \\
                        -PbranchId=${branchId}
                      """
              
                }
            }
        }
    }
      
    post {
        always {
            emailext(
                to: mailingList,
                recipientProviders: [culprits(), requestor(), upstreamDevelopers()],
                replyTo: mailingList,
                subject: "[${repoName}] Build #${currentBuild.number} ${currentBuild.currentResult}",
                mimeType: 'text/html',
                body: '${JELLY_SCRIPT,template="html.jelly"}'
            )
        }
	 failure {
            emailext(
                to: '$DEFAULT_RECIPIENTS',
                recipientProviders: [culprits(), requestor()],
                replyTo: mailingList,
                subject: "[${repoName}] Build #${currentBuild.number} ${currentBuild.currentResult}",
                mimeType: 'text/html',
                body: '${JELLY_SCRIPT,template="html.jelly"}'
            )
        }
    }
}
