helloworld
Index of gradle-dev-local/ch/appuio/techlab/artifactorytest-origin_feature/0.1.1-SNAPSHOT-origin_feature-SNAPSHOT
gradle-dev-local/ch/appuio/techlab/artifactorytest-origin_feature/0.1.1-origin_feature-SNAPSHOT
gradle-dev-local/ch/appuio/techlab/artifactorytest/origin/feature-SNAPSHOT/artifactorytest-origin
https://artifactorytest-0.1.1-20240829.065551-1-application_sample.zip/
     choice(name: 'REPO_NAME', choices: ['gradle-dev-local'], description: 'Select the Artifactory Repository')
    parameters {
         string(name: 'AGENT_LABEL', defaultValue: 'b2bi-build-03', description: 'Agent for build')
         choice(name: 'REPO_NAME', choices: ['b2bi-npm'])
    }
 ARTIFACTORY_REPOSITORY = getArtifactRepo()
def artifactRepoList = ['libs-snapshot-local', 'libs-release-local']

 choice(name: 'ARTIFACTORY_REPOSITORY', choices: artifactRepoList)
def getArtifactRepo() {
    if (params.ARTIFACTORY_REPOSITORY) {
        // Entered parameter if set
        return params.ARTIFACTORY_REPOSITORY
    } else {
        // Default to first item in list otherwise
        return artifactRepoList[0]
    }
}
-------
pipeline {
    agent {
        label params.AGENT_LABEL
    }
    parameters {
        string(name: 'AGENT_LABEL', defaultValue: 'b2bi-build-03', description: 'Agent for build')
        choice(name: 'REPO_NAME', choices: ['b2bi-npm'])
        choice(name: 'ARTIFACTORY_REPOSITORY', choices: artifactRepoList)
    }
    environment {
        ARTIFACTORY_REPOSITORY = getArtifactRepo()
    }
    stages {
        stage('Example') {
            steps {
                script {
                    echo "Using Artifactory Repository: ${env.ARTIFACTORY_REPOSITORY}"
                    // Add your build steps here
                }
            }
        }
    }
}

def artifactRepoList = ['libs-snapshot-local', 'libs-release-local']

def getArtifactRepo() {
    if (params.ARTIFACTORY_REPOSITORY) {
        // Entered parameter if set
        return params.ARTIFACTORY_REPOSITORY
    } else {
        // Default to first item in list otherwise
        return artifactRepoList[0]
    }
}


----

def getArtifactRepo() {
    if (params.ARTIFACTORY_REPOSITORY) {
        // Entered parameter if set
        return params.ARTIFACTORY_REPOSITORY
    } else {
        // Default to first item in list otherwise
        return artifactRepoList[0]
    }
}

def artifactRepoList = ['b2bi-npm','libs-snapshot-local', 'libs-release-local']

pipeline {
    agent { label "${params.AGENT_LABEL}" }

    parameters {
         string(name: 'AGENT_LABEL', defaultValue: 'b2bi-build-03', description: 'Agent for build')
         choice(name: 'ARTIFACTORY_REPOSITORY', choices: artifactRepoList)
    }
  environment {
    ARTIFACTORY_CREDS = credentials('pempublish') 
    ARTIFACTORY_REPOSITORY = getArtifactRepo()
    ARTIFACTORY_SERVER_ID= 'ARTIFACTORY'
  }
 

    stages {

        stage('Build and Clean') {
            steps {
                script {
                  def repoUrl = "${env.ARTIFACTORY_URL}"
                  def branchId = env.GIT_BRANCH
                  def server = Artifactory.server(ARTIFACTORY_SERVER_ID)
                  def artifactoryUrl = server.getUrl()
                  env.ARTIFACTORY_URL = artifactoryUrl 
                  echo "${repoUrl}-${branchId}-${env.ARTIFACTORY_URL}"
                    sh 'chmod +x gradlew'
                       sh """
                        ./gradlew clean build artifactoryPublish \\
                        -PartifactoryURL=${env.ARTIFACTORY_URL} \\
                        -PartifactoryRepo=${env.ARTIFACTORY_REPOSITORY}  \\
                        -PartifactoryUser=${ARTIFACTORY_CREDS_USR} \\
                        -PartifactoryPassword=${ARTIFACTORY_CREDS_PSW} \\
                        -PbranchId=${branchId}
                      """
              
                }
            }
        }

     /*   stage('Upload to Artifactory') {
            steps {
                sh 'pwd'
                sh './gradlew artifactoryPublish'
            }
        } */
    }
}


---


stage('Build and Clean') {
    steps {
        script {
            // Get Artifactory server URL
            def server = Artifactory.server(ARTIFACTORY_SERVER_ID)
            env.ARTIFACTORY_URL = server.getUrl()
            
            // Set Artifactory credentials as environment variables
            env.ARTIFACTORY_USER = ARTIFACTORY_CREDS_USR
            env.ARTIFACTORY_PASSWORD = ARTIFACTORY_CREDS_PSW
            
            // Echo combined info for debugging
            echo "${env.ARTIFACTORY_URL}-${env.GIT_BRANCH}-${env.ARTIFACTORY_URL}"
            
            // Make gradlew executable and run the build and publish tasks
            sh 'chmod +x gradlew'
            sh """
                ./gradlew clean build artifactoryPublish \\
                -PartifactoryURL=${env.ARTIFACTORY_URL} \\
                -PartifactoryRepo=${env.ARTIFACTORY_REPOSITORY} \\
                -PartifactoryUser=${env.ARTIFACTORY_USER} \\
                -PartifactoryPassword=${env.ARTIFACTORY_PASSWORD} \\
                -PbranchId=${env.GIT_BRANCH}
            """
        }
    }
}
