plugins {
    id 'java'
    id 'maven-publish'
    id 'com.jfrog.artifactory' version '5.1.12' // Artifactory plugin for Gradle
    id 'org.springframework.boot' version '3.3.2' // Optional, if using Spring Boot
    id 'io.spring.dependency-management' version '1.1.6' // Optional, if using Spring Boot
}

group = 'ch.appuio.techlab'
version = '0.1.1-SNAPSHOT'
sourceCompatibility = JavaVersion.VERSION_17
targetCompatibility = JavaVersion.VERSION_17

repositories {
    mavenCentral()
    // Add other repositories if needed
}

dependencies {
    // implementation 'org.springframework.boot:spring-boot-starter'
    // implementation 'org.springframework.boot:spring-boot-starter-web'
    // implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
    // testImplementation 'org.springframework.boot:spring-boot-starter-test'
    
    compileOnly('org.springframework.boot:spring-boot-starter-validation')
	implementation('org.springframework.boot:spring-boot-starter')
	implementation('org.springframework.boot:spring-boot-starter-actuator')
	implementation('org.springframework.boot:spring-boot-starter-data-jpa')
	implementation('org.springframework.boot:spring-boot-starter-jdbc')
	implementation('org.springframework.boot:spring-boot-starter-web')
	implementation('org.liquibase:liquibase-core')
	implementation('io.micrometer:micrometer-registry-prometheus')
	implementation('com.h2database:h2')
	implementation('mysql:mysql-connector-java:8.0.33')
	implementation('org.postgresql:postgresql')
	testImplementation('org.springframework.boot:spring-boot-starter-test')
	testImplementation('org.springframework.boot:spring-boot-starter-test') {
		exclude group: 'org.junit.vintage', module: 'junit-vintage-engine'
	}
	testImplementation('junit:junit:4.13.2')
}

// jar {
//     archiveBaseName.set('spring-test')
//     archiveVersion.set(version)
// }

publishing {
    publications {
        mavenJava(MavenPublication) {
            from components.java
           // def jarFileName = "${jar.archiveBaseName.get()}-${jar.archiveVersion.get()}.jar"

           //  // Exclude files matching a specific pattern, e.g., any file containing "-plain"
           //  if (!jarFileName.contains("-plain")) {
           //      artifact file("build/libs/$jarFileName")
           //  }
      def jarFiles = fileTree(dir: "$buildDir/libs") {
    include '*.jar'           // Include all JAR files
    exclude '*-plain.jar'     // Exclude JAR files with 'plain' in their name
}

// Add each JAR file (except the excluded ones) as an artifact
jarFiles.each { file ->
    if (file.exists()) { // Check if the file exists before adding it
        println "Adding artifact: ${file.name}" // Print the name of the artifact being added
        artifact file
    } else {
        println "Warning: The artifact file ${file.name} does not exist."
    }
} 
	}
    }
}
 	   
	 

artifactory {
    contextUrl = 'http://172.27.225.231:8082/artifactory'
    publish {
        repository {
            repoKey = 'gradle-dev-local' // Ensure this matches your Artifactory repository key
            username = 'admin'
                password = 'DevOps9@'
        }
        defaults {
            publications('mavenJava') // Must match the publication name in the publishing block
            publishArtifacts = true
        }
       
    }
    
}
