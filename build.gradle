 plugins {
    id 'java'
    id 'maven-publish'
    id 'com.jfrog.artifactory' version '5.1.12' // Artifactory plugin for Gradle
    id 'org.springframework.boot' version '3.3.2' // Optional, if using Spring Boot
    id 'io.spring.dependency-management' version '1.1.6' // Optional, if using Spring Boot
}


repositories {
    mavenCentral()
    // Add other repositories if needed
}

   repositories {
     maven {
         url "http://172.27.225.231:8082/artifactory/gradle-dev-local" // Replace with your Artifactory repository URL
       allowInsecureProtocol=true
       credentials {
             username = "admin"
             password = "DevOp9@"
         }
//      allowInsecureProtocol = true
    }
 }
dependencies {
 // implementation 'com.example:my-jar-artifact:1.0.0' // Coordinates of the JAR file
 //   implementation 'ch.appuio.techlab:artifactorytest:0.1.1'
   // implementation 'ch.appuio.techlab:artifactorytest:0.1.1-SNAPSHOT'



    compileOnly('org.springframework.boot:spring-boot-starter-validation')
    implementation('org.springframework.boot:spring-boot-starter')
    implementation('org.springframework.boot:spring-boot-starter-actuator')
    implementation('org.springframework.boot:spring-boot-starter-data-jpa')
    implementation('org.springframework.boot:spring-boot-starter-jdbc')
    implementation('org.springframework.boot:spring-boot-starter-web')
    implementation('org.liquibase:liquibase-core')
    implementation('io.micrometer:micrometer-registry-prometheus')
    implementation('com.h2database:h2')
    implementation('mysql:mysql-connector-java:8.0.33')
    implementation('org.postgresql:postgresql')
    testImplementation('org.springframework.boot:spring-boot-starter-test') {
        exclude group: 'org.junit.vintage', module: 'junit-vintage-engine'
    }
    testImplementation('junit:junit:4.13.2')

}

// Create a custom configuration that extends 'implementation' and is resolvable
// configurations {
//     resolvedImplementation {
//         canBeResolved = true
//         canBeConsumed = false
//         extendsFrom configurations.implementation
//     }
// }

// Task to ensure dependencies are resolved
// task ensureDependenciesResolved {
//     doLast {
//         configurations.resolvedImplementation.resolve()
//     }
// }

// Task to print the path of the downloaded JAR file
// task printDependencyPath {
//     dependsOn ensureDependenciesResolved
//     doLast {
//         configurations.resolvedImplementation.resolvedConfiguration.resolvedArtifacts.each { artifact ->
//             if (artifact.file.name.endsWith('.jar')) {
//                 println "Dependency JAR file path: ${artifact.file.absolutePath}"
//             }
//         }
//     }
// }

// Task to copy the JAR file to a specific directory
// task copyDependencies(type: Copy) {
//     dependsOn ensureDependenciesResolved
//     from {
//         configurations.resolvedImplementation.resolvedConfiguration.resolvedArtifacts.collect { it.file }
//     }
//     into "$buildDir/libs"
// }


// task createZip(type: Zip) {

//     //from file('test')
//    from file('/home/rohan/.jenkins/workspace/job2/src/main/resources/application.properties')
//     archiveFileName.set('test.zip')
//     destinationDirectory.set(file("$buildDir/libs/"))

//   //  from "$buildDir/libs/"
//    doLast {
//    println 'Zip file created at ${destinationDirectory}/${archiveFileName}'
// }
//    doFirst {

//    println 'archiving file ....${archiveName}'
// }
// }


 publishing {
   publications {
      mavenJava(MavenPublication) {
       artifactId ='test'
      version = '1.0'
      artifact("${buildDir}/libs/test") {
       classifier = ''
       //extension = 'zip'
    }
 }
 }

   repositories {
     maven {
        url "http://172.27.225.231:8082/artifactory/gradle-dev-local" // Replace with your Artifactory repository URL
         allowInsecureProtocol=true
       credentials {
             username = "admin"
             password = "DevOp9@"
         }
// //     allowInsecureProtocol = true
   }
 }

}

artifactory {
    contextUrl = '$artifactoryURL'
    publish {
        repository {
            repoKey = '$artifactoryRepo' // Ensure this matches your Artifactory repository key
            username = '$artifactoryUser'
            password = '$artifactoryPassword'
        }
        defaults {
          publications('mavenJava') // Must match the publication name in the publishing block
        //  publications('bootJava')
         publishArtifacts = true
        }
    }
}
// Ensure the build depends on both tasks
tasks.build {
   // dependsOn copyDependencies
    //dependsOn printDependencyPath
   // dependsOn  createZip
}
