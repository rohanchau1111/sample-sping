plugins {
    id 'java'
	id 'war'
	id 'maven-publish'
	//id 'org.springframework.boot' version '3.3.4-SNAPSHOT'
	id 'org.springframework.boot' version '3.3.2'
	id 'io.spring.dependency-management' version '1.1.6'
}

group = 'com.example'
version = '0.0.1-SNAPSHOT'

java {
	toolchain {
		languageVersion = JavaLanguageVersion.of(17)
	}
}

repositories {
       mavenCentral()
         maven{
              url = uri('https://artifactory.syncdi1.us.syncsort.com/artifactory/libs-snapshot-local/')
               credentials {
                 username   = 'pem-publisher'
                  password   = 'publisher-for-pem'
                   }
   }
}

dependencies {
	implementation 'org.springframework.boot:spring-boot-starter-web'
 
  // this works  implementation 'com.precisely.b2b.identity:identity-svc:1.0-feature_identity_liberty-SNAPSHOT@war'
	
  //implementation 'com.precisely.b2b.identity:identity-svc/1.0-feature_identity_liberty-SNAPSHOT@war'

//implementation 'com.precisely.b2b.fg-rest-app:1.0-feature_sfg20test-SNAPSHOT'

//implementation 'com.precisely.b2b.identity:identity-svc:1.0-feature_identity_liberty-SNAPSHOT@war'
	implementation 'com.precisely.b2b.identity:identity-svc:1.0-feature_identity_liberty-SNAPSHOT'
	

    providedRuntime 'org.springframework.boot:spring-boot-starter-tomcat'
	testImplementation 'org.springframework.boot:spring-boot-starter-test'
	testRuntimeOnly 'org.junit.platform:junit-platform-launcher'
}

//  tasks.register('copyDependencies', Copy) {
//      from configurations.runtimeClasspath
//      into "$buildDir/libs"
//     //  println "$buildDir/libs"
//  }

configurations {
     resolvedImplemntation {
        canBeResolved = true
        canBeConsumed = false
        extendsFrom configurations.implementation
     }
}

task ensureDependenciesResolved {
    doLast {
        configurations.resolvedImplemntation.resolve()
    }
}
 tasks.register('copyDependencies', Copy) {
     dependsOn ensureDependenciesResolved 
      from  {
       configurations.resolvedImplemntation.resolvedConfiguration.resolvedArtifacts.collect { it.file }
 
      }
     into "$buildDir/libs"
    //  println "$buildDir/libs"
 }

// task  copyDependencies(type: Copy) {
//      dependsOn ensureDependenciesResolved 
//       from  {
//        configurations.resolvedImplemntation.resolvedConfiguration.resolvedArtifacts.collect { it.file }
//       }
//       into "$buildDir/libs"
// }

// task  copyDependencies(type: Copy) {
//      dependsOn ensureDependenciesResolved 
//       from  {
//        configurations.resolvedImplemntation.resolvedConfiguration.resolvedArtifacts.collect { 
//          if (it.file.name.endsWith('war') && !it.file.name.contains('-plain.war')) {
//            it.file    
//          }
//     }
//   }
//       into "$buildDir/libs"
// }



// tasks.register('copyDependencies', Copy) {
//      dependsOn ensureDependenciesResolved 
//       from  {
//        configurations.resolvedImplemntation.resolvedConfiguration.resolvedArtifacts.collect { 
//         if (it.file,name.endsWith('war') && !it.file.name.contains('-plain')) {
//             it.file
//         }
 
//       }
//      into "$buildDir/libs"
//     //  println "$buildDir/libs"
//  }
 tasks.register('printDependencyPath') {
     doLast {
         configurations.runtimeClasspath.resolvedConfiguration.resolvedArtifacts.each { artifact ->
             if (artifact.file.name.endsWith('.war')) {
                 println "Dependency war file path: ${artifact.file.absolutePath}"
             }
         }
     }
}

 tasks.named('build') {
     dependsOn 'copyDependencies'
     dependsOn 'printDependencyPath'
 }


tasks.named('test') {
	useJUnitPlatform()
}

task sample {
	println "hello"
}
